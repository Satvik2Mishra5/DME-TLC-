import math
import numpy as np
import matplotlib.pyplot as plt

# Define the beam parameters
span = 17  # Span of beam
A = 3      # Distance to left support from origin
B = 13     # Distance to right support point from origin

# Define the point load(s)
pointLoads = np.array([[9, 0, -90]])  # Format: [location, horizontal force, vertical force]

# Initialize data containers
shearForce = np.empty([0, span + 1])  # Shear forces at each data point
bendingMoment = np.empty([0, span + 1])  # Bending moment at each data point

# Calculate reaction forces by force and moment balance
def calculate_reactions(pointLoads):
    # Total horizontal and vertical forces
    total_horizontal_force = np.sum(pointLoads[:, 1])
    total_vertical_force = np.sum(pointLoads[:, 2])

    # Moment about support A
    total_moment = 0
    for load in pointLoads:
        total_moment += load[0] * load[2]  # Moment = Force * Distance

    # Solving equations for reaction forces using force and moment balance
    Va = total_vertical_force - (total_horizontal_force * (B - A) / span)
    Vb = total_horizontal_force - Va
    Ha = total_moment / (B - A)

    return Va, Ha, Vb

# Calculate reactions
Va, Ha, Vb = calculate_reactions(pointLoads)
reactions = [Va, Ha, Vb]

shearForce = np.empty([0, span + 1])  # Shear forces at each data point
bendingMoment = np.empty([0, span + 1])  # Bending moment at each data point

def reactions_PL(n):
    xp = pointLoads[n, 0]  # Location of point load
    fx = pointLoads[n, 1]  # Point load horizontal component magnitude
    fy = pointLoads[n, 2]  # Point load vertical component magnitude

    la_p = A - xp  # Lever arm of point load about point A
    mp = fy * la_p  # Moment generated by point load about A - clockwise moments are positive
    la_vb = B - A  # Lever arm of vertical reaction at B about point A

    Vb = mp / la_vb  # Vertical reaction at B
    Va = -fy - Vb   # Vertical reaction at A
    Ha = -fx        # Horizontal reaction at A

    return Va, Vb, Ha

# Calculate reactions for each point load
for n, p in enumerate(pointLoads):
    va, vb, ha = reactions_PL(n)
    reactions += np.array([va, ha, vb])

# Calculate shear and bending moment for each point load
for n, p in enumerate(pointLoads):
    xp = p[0]  # Location of point load
    fy = p[2]  # Point load vertical component magnitude

    # Initialize arrays to hold shear and bending moment
    Shear = np.zeros(span + 1)
    Moment = np.zeros(span + 1)

    for i, x in enumerate(range(span + 1)):
        shear = 0
        moment = 0

        if x > A:
            shear += reactions[0]  # Shear from reaction at A
            moment -= reactions[0] * (x - A)  # Moment from reaction at A

        if x > B:
            shear += reactions[2]  # Shear from reaction at B
            moment -= reactions[2] * (x - B)  # Moment from reaction at B

        if x > xp:
            shear += fy  # Shear from point load
            moment -= fy * (x - xp)  # Moment from point load

        Shear[i] = shear
        Moment[i] = moment

    shearForce = np.append(shearForce, [Shear], axis=0)
    bendingMoment = np.append(bendingMoment, [Moment], axis=0)

# Find maximum shear force and bending moment
max_shear_force = np.max(np.abs(shearForce))
max_bending_moment = np.max(np.abs(bendingMoment))

print("Maximum Shear Force:", max_shear_force)
print("Maximum Bending Moment:", max_bending_moment)

# Define the x-axis data (positions along the beam)
x_positions = np.arange(0, span + 1)

# Plot shear force diagram
plt.figure(figsize=(10, 6))
plt.plot(x_positions, shearForce.T)
plt.title('Shear Force Diagram')
plt.xlabel('Position (ft)')
plt.ylabel('Shear Force (kips)')
plt.grid(True)
plt.show()

# Plot bending moment diagram
plt.figure(figsize=(10, 6))
plt.plot(x_positions, bendingMoment.T)
plt.title('Bending Moment Diagram')
plt.xlabel('Position (ft)')
plt.ylabel('Bending Moment (kip-ft)')
plt.grid(True)
plt.show()

